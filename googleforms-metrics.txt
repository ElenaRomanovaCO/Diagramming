 Implementation Instructions
Open Google Apps Script
Click "New Project"
Delete the default code and paste the generated script
Click "Save" and give your project a name
Click "Run" button (you may need to authorize permissions)
Check the console log for the Form URL and Sheet URL
Share the Form URL with your team for assessment
Monitor responses and scoring in the Google Sheet



/**
 * Test Maturity Scorecard - Google Forms Creator
 * This script creates a comprehensive form and sets up automated scoring in Google Sheets
 * Generated on: 6/10/2025
 */

function createTestMaturityScorecardForm() {
  // Create the form
  const form = FormApp.create('Test Maturity Scorecard Assessment');
  form.setDescription('Comprehensive assessment of testing maturity across 8 key categories with 27 metrics. Results will be automatically calculated and scored.');
  
  // Set up response destination (Google Sheet)
  const sheet = SpreadsheetApp.create('Test Maturity Scorecard Responses');
  form.setDestination(FormApp.DestinationType.SPREADSHEET, sheet.getId());
  
  // Add project context section
  form.addSectionHeaderItem()
    .setTitle('Project Context & Technical Details')
    .setHelpText('Please provide information about your project/application to contextualize the assessment.');
  
  // Project/Application Name
  form.addTextItem()
    .setTitle('Project/Application Name')
    .setRequired(true);

  // Source Code Framework
  form.addListItem()
    .setTitle('Source Code Framework')
    .setChoiceValues([
      'React',
      'Angular',
      'Vue.js',
      'Node.js',
      'Spring Boot',
      '.NET Core',
      'Django',
      'Flask',
      'Express.js',
      'Laravel',
      'Ruby on Rails',
      'Go',
      'Python',
      'Java',
      'C#',
      'PHP',
      'Other'
    ]);

  // Infrastructure Type
  form.addListItem()
    .setTitle('Infrastructure Type')
    .setChoiceValues([
      'Amazon Web Services (AWS)',
      'Google Cloud Platform (GCP)',
      'Microsoft Azure',
      'Multi-Cloud',
      'On-Premises',
      'Hybrid (Cloud + On-Prem)',
      'Other Cloud Provider'
    ]);

  // Application Type
  form.addListItem()
    .setTitle('Application Type')
    .setChoiceValues([
      'Internal (Enterprise/Intranet)',
      'External (Customer-facing)',
      'Both Internal & External',
      'API/Microservice',
      'Data Pipeline/ETL'
    ]);

  // UI/Mobile Interface
  form.addListItem()
    .setTitle('UI/Mobile Interface')
    .setChoiceValues([
      'Web UI Only',
      'Mobile App Only',
      'Web + Mobile App',
      'API Only (No UI)',
      'Desktop Application',
      'Progressive Web App (PWA)'
    ]);

  // Current Release Frequency
  form.addListItem()
    .setTitle('Current Release Frequency')
    .setChoiceValues([
      'Multiple times per day',
      'Daily',
      'Weekly',
      'Bi-weekly (Every 2 weeks)',
      'Monthly',
      'Quarterly',
      'Ad-hoc/Irregular'
    ]);

  // Team Size
  form.addListItem()
    .setTitle('Team Size')
    .setChoiceValues([
      'Small (1-5 people)',
      'Medium (6-15 people)',
      'Large (16-30 people)',
      'Enterprise (30+ people)'
    ]);

  // Testing Infrastructure Section
  form.addSectionHeaderItem()
    .setTitle('Testing Infrastructure')
    .setHelpText('Assess your current maturity level for each metric in this category.');

  // Standardized Test Environments
  form.addListItem()
    .setTitle('Standardized Test Environments')
    .setChoiceValues([
      'No standard env (1)',
      'Shared but stable (2)',
      'Isolated manually provisioned (3)',
      'Partially automated (4)',
      'Fully automated and reproducible (5)'
    ])
    .setRequired(true);

  // CI/CD Build Pipeline Utilization
  form.addListItem()
    .setTitle('CI/CD Build Pipeline Utilization')
    .setChoiceValues([
      'None (1)',
      'Manual (2)',
      'Partial automation (3)',
      'Mostly automated (4)',
      'Fully automated (5)'
    ])
    .setRequired(true);

  // Test Automation Pipeline
  form.addListItem()
    .setTitle('Test Automation Pipeline')
    .setChoiceValues([
      'None (1)',
      'Manual trigger (2)',
      'Partial test stages (3)',
      'End-to-end tests integrated (4)',
      'CI-triggered full automation (5)'
    ])
    .setRequired(true);

  // Test Run Reporting
  form.addListItem()
    .setTitle('Test Run Reporting')
    .setChoiceValues([
      'Manual checks (1)',
      'Basic logs (2)',
      'Automated reports on demand (3)',
      'Scheduled auto-reports (4)',
      'Live dashboards (5)'
    ])
    .setRequired(true);

  // Testing Practices Section
  form.addSectionHeaderItem()
    .setTitle('Testing Practices')
    .setHelpText('Assess your current maturity level for each metric in this category.');

  // Code Coverage
  form.addListItem()
    .setTitle('Code Coverage')
    .setChoiceValues([
      '<20% (1)',
      '20–49% (2)',
      '50–69% (3)',
      '70–89% (4)',
      '90%+ (5)'
    ])
    .setRequired(true);

  // Automated Testing Rate
  form.addListItem()
    .setTitle('Automated Testing Rate')
    .setChoiceValues([
      '0–25% (1)',
      '26–50% (2)',
      '51–75% (3)',
      '76–90% (4)',
      '91–100% (5)'
    ])
    .setRequired(true);

  // Performance Testing on Each Release
  form.addListItem()
    .setTitle('Performance Testing on Each Release')
    .setChoiceValues([
      'Never (1)',
      'Sometimes (2)',
      'Manual, ad-hoc (3)',
      'Regular pre-prod (4)',
      'Automated in pipeline (5)'
    ])
    .setRequired(true);

  // Smoke Test in Higher Envs
  form.addListItem()
    .setTitle('Smoke Test in Higher Envs')
    .setChoiceValues([
      'Not performed (1)',
      'On-demand (2)',
      'Manual pre-release (3)',
      'Automated before release (4)',
      'Automated for all changes (5)'
    ])
    .setRequired(true);

  // Test Strategy & Planning Section
  form.addSectionHeaderItem()
    .setTitle('Test Strategy & Planning')
    .setHelpText('Assess your current maturity level for each metric in this category.');

  // Test Matrix Presence
  form.addListItem()
    .setTitle('Test Matrix Presence')
    .setChoiceValues([
      'No Matrix/Plan (1)',
      'Informal Testing Guidelines (2)',
      'Partial Test Coverage Matrix (3)',
      'Basic Test Matrix Present (4)',
      'Comprehensive Test Matrix (5)'
    ])
    .setRequired(true);

  // Test Case Management
  form.addListItem()
    .setTitle('Test Case Management')
    .setChoiceValues([
      'No formal cases (1)',
      'Basic documentation (2)',
      'Organized test suites (3)',
      'Automated test management (4)',
      'Full traceability & reporting (5)'
    ])
    .setRequired(true);

  // Risk-Based Testing
  form.addListItem()
    .setTitle('Risk-Based Testing')
    .setChoiceValues([
      'No risk assessment (1)',
      'Basic risk awareness (2)',
      'Some risk prioritization (3)',
      'Systematic risk-based testing (4)',
      'Continuous risk assessment (5)'
    ])
    .setRequired(true);

  // Delivery Metrics Section
  form.addSectionHeaderItem()
    .setTitle('Delivery Metrics')
    .setHelpText('Assess your current maturity level for each metric in this category.');

  // Story Rejection Rate
  form.addListItem()
    .setTitle('Story Rejection Rate')
    .setChoiceValues([
      '>30% (1)',
      '21–30% (2)',
      '11–20% (3)',
      '1–10% (4)',
      '0% (5)'
    ])
    .setRequired(true);

  // Cycle Time (Story to Done)
  form.addListItem()
    .setTitle('Cycle Time (Story to Done)')
    .setChoiceValues([
      '>20 days (1)',
      '15–20 days (2)',
      '10–14 days (3)',
      '5–9 days (4)',
      '<5 days (5)'
    ])
    .setRequired(true);

  // First Pass Yield
  form.addListItem()
    .setTitle('First Pass Yield')
    .setChoiceValues([
      '<50% (1)',
      '51–70% (2)',
      '71–85% (3)',
      '86–95% (4)',
      '>95% (5)'
    ])
    .setRequired(true);

  // Build-to-Test Time
  form.addListItem()
    .setTitle('Build-to-Test Time')
    .setChoiceValues([
      '>1 day (1)',
      '8–24 hrs (2)',
      '2–7 hrs (3)',
      '30 mins–2 hrs (4)',
      '<30 mins (5)'
    ])
    .setRequired(true);

  // Test-to-Release Ready Time
  form.addListItem()
    .setTitle('Test-to-Release Ready Time')
    .setChoiceValues([
      '>2 days (1)',
      '1–2 days (2)',
      '4–8 hrs (3)',
      '1–4 hrs (4)',
      '<1 hr (5)'
    ])
    .setRequired(true);

  // DORA Metrics Section
  form.addSectionHeaderItem()
    .setTitle('DORA Metrics')
    .setHelpText('Assess your current maturity level for each metric in this category.');

  // Deployment Frequency
  form.addListItem()
    .setTitle('Deployment Frequency')
    .setChoiceValues([
      'Monthly (1)',
      'Bi-weekly (2)',
      'Weekly (3)',
      'Daily (4)',
      'On-demand (5)'
    ])
    .setRequired(true);

  // Lead Time for Changes
  form.addListItem()
    .setTitle('Lead Time for Changes')
    .setChoiceValues([
      '>30 days (1)',
      '15–30 days (2)',
      '8–14 days (3)',
      '1–7 days (4)',
      '<1 day (5)'
    ])
    .setRequired(true);

  // Change Failure Rate
  form.addListItem()
    .setTitle('Change Failure Rate')
    .setChoiceValues([
      '>50% (1)',
      '31–50% (2)',
      '16–30% (3)',
      '6–15% (4)',
      '0–5% (5)'
    ])
    .setRequired(true);

  // Mean Time to Restore (MTTR)
  form.addListItem()
    .setTitle('Mean Time to Restore (MTTR)')
    .setChoiceValues([
      '>7 days (1)',
      '3–7 days (2)',
      '1–2 days (3)',
      '1–12 hrs (4)',
      '<1 hr (5)'
    ])
    .setRequired(true);

  // Reliability Section
  form.addSectionHeaderItem()
    .setTitle('Reliability')
    .setHelpText('Assess your current maturity level for each metric in this category.');

  // Mean Time to Detection (MTTD)
  form.addListItem()
    .setTitle('Mean Time to Detection (MTTD)')
    .setChoiceValues([
      '>7 days (1)',
      '3–7 days (2)',
      '1–2 days (3)',
      '1–12 hrs (4)',
      '<1 hr (5)'
    ])
    .setRequired(true);

  // Mean Time Between Failures (MTBF)
  form.addListItem()
    .setTitle('Mean Time Between Failures (MTBF)')
    .setChoiceValues([
      '<1 day (1)',
      '1–3 days (2)',
      '4–7 days (3)',
      '8–14 days (4)',
      '>14 days (5)'
    ])
    .setRequired(true);

  // Availability
  form.addListItem()
    .setTitle('Availability')
    .setChoiceValues([
      '<90% (1)',
      '90–94% (2)',
      '95–97% (3)',
      '98–99.5% (4)',
      '>99.5% (5)'
    ])
    .setRequired(true);

  // Production Incidents by Reason
  form.addListItem()
    .setTitle('Production Incidents by Reason')
    .setChoiceValues([
      'Many with no classification (1)',
      'Some with generic reason (2)',
      'Partially classified (3)',
      'Mostly classified (4)',
      'Fully categorized and monitored (5)'
    ])
    .setRequired(true);

  // Security Vulnerabilities
  form.addListItem()
    .setTitle('Security Vulnerabilities')
    .setChoiceValues([
      'Frequent criticals (1)',
      'Occasional high/criticals (2)',
      'Moderate with triage (3)',
      'Rare, monitored (4)',
      'Fully managed proactively (5)'
    ])
    .setRequired(true);

  // Resource Utilization Section
  form.addSectionHeaderItem()
    .setTitle('Resource Utilization')
    .setHelpText('Assess your current maturity level for each metric in this category.');

  // CPU, Memory, Disk, Network
  form.addListItem()
    .setTitle('CPU, Memory, Disk, Network')
    .setChoiceValues([
      'No visibility (1)',
      'Monitored manually (2)',
      'Thresholds but reactive (3)',
      'Proactive autoscaling (4)',
      'Optimized with alerts (5)'
    ])
    .setRequired(true);

  // Satisfaction Section
  form.addSectionHeaderItem()
    .setTitle('Satisfaction')
    .setHelpText('Assess your current maturity level for each metric in this category.');

  // Employee Satisfaction
  form.addListItem()
    .setTitle('Employee Satisfaction')
    .setChoiceValues([
      'Very low (1)',
      'Low (2)',
      'Average (3)',
      'Good (4)',
      'Excellent (5)'
    ])
    .setRequired(true);

  // Customer Satisfaction
  form.addListItem()
    .setTitle('Customer Satisfaction')
    .setChoiceValues([
      'Very low (1)',
      'Low (2)',
      'Average (3)',
      'Good (4)',
      'Excellent (5)'
    ])
    .setRequired(true);

  // Set up submission message
  form.setConfirmationMessage('Thank you for completing the Test Maturity Scorecard! Your responses have been recorded and will be automatically scored. Check the linked Google Sheet for detailed results and recommendations.');
  
  // Log the form URL
  console.log('Form created successfully!');
  console.log('Form URL: ' + form.getPublishedUrl());
  console.log('Responses Sheet URL: ' + sheet.getUrl());
  
  // Set up the scoring sheet
  setupScoringSheet(sheet);
  
  return {
    formUrl: form.getPublishedUrl(),
    sheetUrl: sheet.getUrl()
  };
}

function setupScoringSheet(spreadsheet) {
  // Get the responses sheet
  const responsesSheet = spreadsheet.getSheets()[0];
  responsesSheet.setName('Form Responses');
  
  // Create scoring sheet
  const scoringSheet = spreadsheet.insertSheet('Scorecard Analysis');
  
  // Set up headers for scoring sheet
  const headers = [
    'Timestamp', 'Project Name', 'Framework', 'Infrastructure', 'App Type', 
    'UI Interface', 'Release Frequency', 'Team Size',
    'Total Score', 'Max Possible', 'Percentage', 'Maturity Level'
  ];
  
  // Add category scores
  const categories = [
    'Testing Infrastructure', 'Testing Practices', 'Test Strategy & Planning',
    'Delivery Metrics', 'DORA Metrics', 'Reliability', 
    'Resource Utilization', 'Satisfaction'
  ];
  
  categories.forEach(category => {
    headers.push(category + ' Score');
    headers.push(category + ' %');
  });
  
  scoringSheet.getRange(1, 1, 1, headers.length).setValues([headers]);
  
  // Add formulas for automatic scoring (will be added when responses come in)
  const formulaRow = 2;
  
  // Total score formula (extract scores from response text)
  // This is a simplified version - you can enhance with more sophisticated parsing
  scoringSheet.getRange(formulaRow, 9).setFormula('=SUM(REGEXEXTRACT('Form Responses'!I2:AH2,"\\((\\d+)\\)"))');
  scoringSheet.getRange(formulaRow, 10).setValue(135); // Max possible (27 metrics × 5)
  scoringSheet.getRange(formulaRow, 11).setFormula('=I2/J2*100');
  
  // Maturity level assessment
  scoringSheet.getRange(formulaRow, 12).setFormula('=IF(K2>=80,"Level 5: Optimizing",IF(K2>=65,"Level 4: Managed",IF(K2>=50,"Level 3: Defined",IF(K2>=35,"Level 2: Repeatable","Level 1: Initial"))))');
  
  // Format the scoring sheet
  scoringSheet.getRange(1, 1, 1, headers.length).setBackground('#4285f4').setFontColor('white').setFontWeight('bold');
  scoringSheet.setFrozenRows(1);
  
  console.log('Scoring sheet set up successfully!');
}

// Run this function to create your form
createTestMaturityScorecardForm();
